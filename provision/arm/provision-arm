#!/bin/env bash
set -o errexit

if [ "$#" -ne 2 ]; then
  echo "Usage: $0 node0_ip node1_ip" >&2
  echo "Two systems that can reach eachother will be provisioned by this script"
  echo "Ensure that ssh keys have been installed on both"
  exit 1
fi
node0_ip="$1"
node1_ip="$2"

test -d ovn-kubernetes || git clone --depth 1 --single-branch --branch bf_support git@gitlab.cee.redhat.com:bnemeth/ovn-kubernetes.git
tar czf ovn-kubernetes.tar.gz ovn-kubernetes

scp ovn-kubernetes.tar.gz root@$node0_ip:~/ &
scp ovn-kubernetes.tar.gz root@$node1_ip:~/ &
wait

package_prefix="http://download.eng.bos.redhat.com/brewroot/vol/rhel-8/packages"
host_packages=(
"go"
"make"
"git"
"podman"
"podman-docker"
"$package_prefix/openvswitch2.13/2.13.0/67.el8fdp/aarch64/openvswitch2.13-2.13.0-67.el8fdp.aarch64.rpm"
"$package_prefix/openvswitch2.13/2.13.0/67.el8fdp/aarch64/openvswitch2.13-devel-2.13.0-67.el8fdp.aarch64.rpm"
"$package_prefix/openvswitch2.13/2.13.0/67.el8fdp/aarch64/python3-openvswitch2.13-2.13.0-67.el8fdp.aarch64.rpm"
"$package_prefix/openvswitch-selinux-extra-policy/1.0/23.el8fdp/noarch/openvswitch-selinux-extra-policy-1.0-23.el8fdp.noarch.rpm"
)

cmd="dnf install -y ${host_packages[*]};
systemctl enable openvswitch;
systemctl restart openvswitch;
podman system prune -f;
podman kill --all;
podman system prune -f;
test -f /usr/bin/python || ln -s /usr/bin/python3 /usr/bin/python;
test -f /usr/bin/pip3 || ln -s /usr/bin/pip3 /usr/bin/pip;
rm -rf ovn-kubernetes;
tar xf ovn-kubernetes.tar.gz;
cd ovn-kubernetes/dist/images/;
make -j20;
podman build -t my-container -f Dockerfile;
mkdir -p /var/run/ovn/;
mkdir -p /var/log/ovn/;
mkdir -p /run/netns/;"

cmd1="systemctl enable openvswitch;
systemctl start openvswitch;
ovs-vsctl set open . external-ids:system-id=chassis-1;
ovs-vsctl set open . external-ids:hostname=sandbox1;
ovs-vsctl set open . external-ids:ovn-encap-type=geneve;
ovs-vsctl set open . external-ids:ovn-encap-ip=$node0_ip;
ovs-vsctl set open . external_ids:ovn-remote=tcp:$node0_ip:6642;
systemctl restart openvswitch;"

cmd2="systemctl enable openvswitch;
systemctl start openvswitch;
ovs-vsctl set open . external-ids:system-id=chassis-2;
ovs-vsctl set open . external-ids:hostname=sandbox2;
ovs-vsctl set open . external-ids:ovn-encap-type=geneve;
ovs-vsctl set open . external-ids:ovn-encap-ip=$node1_ip;
ovs-vsctl set open . external_ids:ovn-remote=tcp:$node0_ip:6642;
systemctl restart openvswitch;"

ssh root@$node0_ip "$cmd $cmd1" &
ssh root@$node1_ip "$cmd $cmd2" &
wait

vols="-v /var/run/ovn/:/var/run/ovn/:z -v /var/run/openvswitch/:/var/run/openvswitch/:z -v /var/log/ovn/:/var/log/ovn/:z -v /etc/systemd/system/:/etc/systemd/system/:z -v /run/netns/:/run/netns/:z -v /run/openvswitch/:/run/openvswitch/:z -v /run/ovn/:/run/ovn/:z -v /var/lib/openvswitch/:/var/lib/openvswitch/:z"
ssh root@$node0_ip "
podman kill --all;
podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container sb-ovsdb-no-end-point;
podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container nb-ovsdb;
podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container ovn-controller-no-check;
podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container run-ovn-northd;
"

ssh root@$node0_ip "
rm -f setup_env; podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container run-nbctld > setup_env
"

setup_env=$(ssh root@$node0_ip "cat setup_env")

ssh root@$node1_ip "
podman kill --all;
podman run --env ovn_db_hosts=$node0_ip --env K8S_NODE_IP=$node0_ip $vols --net=host -d my-container ovn-controller-no-check;
"

ssh root@$node0_ip "podman exec $setup_env /bin/bash -c \"
ovn-nbctl init &&
ovn-sbctl init &&
ovn-nbctl --if-exists ls-del myswitch &&
ovn-nbctl ls-add myswitch -- set logical_switch myswitch other-config:subnet=10.1.2.0/24 &&
ovn-nbctl lsp-add myswitch port0 -- lsp-set-addresses port0 dynamic &&
ovn-nbctl lsp-add myswitch port1 -- lsp-set-addresses port1 dynamic \" "

ssh root@$node0_ip "
(test ! -f /var/run/netns/red || ip netns del red);
ip netns add red;
(ip a | grep -q port0-r) && ip link del port0-r;
ip link add port0-r type veth peer name veth-r;
ovs-vsctl --if-exists del-port br-int port0-r;
ovs-vsctl add-port br-int port0-r -- set interface port0-r external_ids:iface-id=port0;
ip link set veth-r netns red"

port0_ip_mac=$(ssh root@$node0_ip "podman exec $setup_env ovn-nbctl get logical_switch_port port0 dynamic_addresses")
port1_ip_mac=$(ssh root@$node0_ip "podman exec $setup_env ovn-nbctl get logical_switch_port port1 dynamic_addresses")

port0_mac=$(echo $port0_ip_mac | sed s/\"//g | cut -d" " -f1)
port0_ip=$(echo $port0_ip_mac | sed s/\"//g | cut -d" " -f2)

port1_mac=$(echo $port1_ip_mac | sed s/\"//g | cut -d" " -f1)
port1_ip=$(echo $port1_ip_mac | sed s/\"//g | cut -d" " -f2)

ssh root@$node0_ip "
ip netns exec red ip link set veth-r address $port0_mac;
ip netns exec red ip a add $port0_ip/24 dev veth-r;
ip netns exec red ip link set veth-r up;
ip netns exec red ip link set lo up;
ip link set port0-r up;
"

ssh root@$node1_ip "
(test ! -f /var/run/netns/blue || ip netns del blue);
ip netns add blue;
(ip a | grep -q port1-b) && ip link del port1-b;
ip link add port1-b type veth peer name veth-b;
ovs-vsctl --if-exists del-port br-int port1-b;
ovs-vsctl add-port br-int port1-b -- set interface port1-b external_ids:iface-id=port1;
ip link set veth-b netns blue;
ip netns exec blue ip link set veth-b address $port1_mac;
ip netns exec blue ip a add $port1_ip/24 dev veth-b;
ip netns exec blue ip link set veth-b up;
ip netns exec blue ip link set lo up;
ip link set port1-b up;
"