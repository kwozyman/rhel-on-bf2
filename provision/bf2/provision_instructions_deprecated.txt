====================================
Mellanox / NVIDIA: Bluefield2 How To
====================================


============
PREPARE:
============
The smart-nic requires a HOST system installed with OS (RHEL8+).
The OS repos and EPEL will need be available/configured on the HOST system.
Plug the smart nic into the required x8 / x16 pci slot on the HOST system.
Connect the smart nic USB cable to smart nic header and to a USB port on the HOST.


Now for serial, power, and pxe...
============
SERIAL:
============
You will need the mellanox USB cable for the smart nic.
One end of the cable connects to the header on the smart nic and
the other end (USB male) will be plugged into a USB port on the HOST system.

There are a different methods to connect to serial console, but for Beaker automation we prefer to use ser2net. I will share other srial connection methods for
troubleshooting/other below. [1]

We are using the ser2net package for serial, for our Beaker smart nics.
We already have a Beaker  conserver driver  created for the Bluefield smart nics.
We will open a ticket to request the   Bluefield2 system   be added to console.
The  ser2net  package is only available via EPEL. Once you have installed the
ser2net  package feel free to disable the EPEL repo.
 

-----First-----
On the HOST system.
Download and install  ser2net  from EPEL.
https://fedoraproject.org/wiki/EPEL
For RHEL-8:
~]# yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
~]# yum clean all
~]# yum makecache
~]# yum install -y ser2net

Once ser2net is installed, rename /etc/ser2net.conf to /etc/ser2net.conf.ORIG 
and create a new config file with contents:
BANNER:banner:NVIDIA Bluefield-2 DPU Serial Console (ser2net TCP port \p)\r\n
DEFAULT:speed:115200
DEFAULT:databits:8
DEFAULT:parity:none
DEFAULT:stopbits:1
DEFAULT:xonxoff:false
DEFAULT:rtscts:false
9999:telnet:0:/dev/ttyUSB0:banner


------Second------
Create a systemd service to run ser2net. 
Create the file /etc/systemd/system/ser2net.service with contents:
[Unit]
Description=ser2net service
After=network.target

[Service]
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=ser2net -d -p 9998
ExecReload=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target


------Third------
Now reload the new service file and enable the service.
~]# systemctl daemon-reload
~]# systemctl enable --now ser2net.service


------Fourth------
Finally telnet to the host system port 9999 to view the Bluefield serial console,
or telnet to port 9998 for the ser2net control port (run ‘help’ to see what you can control).

~]$ telnet $HOST_FQDN 9999



============
POWER:
============
Lets configure the HOST system so we can reboot the Bluefield2 device.
We need to use the rshim user-space driver until the following BZ is resolved:
Bug 1744737 - [Mellanox 8 FEAT] Add Mellanox BlueField RSHIM package
https://bugzilla.redhat.com/show_bug.cgi?id=1744737

-----First-----
Install rshim user-space driver.

~]# yum install -y elfutils-libelf-devel make git autoconf tmux automake rpm-build
~]# yum install -y pciutils-devel libusb-devel fuse-devel kernel-modules-extra

~]# cd /tmp
~]# git clone https://github.com/Mellanox/rshim-user-space.git
~]# cd rshim-user-space/
~]# ./bootstrap.sh
~]# ./configure

~]# /bin/rm -rf /tmp/mybuildtest
~]# rpm_topdir=/tmp/mybuildtest
~]# mkdir -p $rpm_topdir/{RPMS,BUILD,SRPM,SPECS,SOURCES} 
~]# version=$(grep "Version:" *.spec | head -1 | awk '{print $NF}')
~]# git archive --format=tgz --prefix=rshim-${version}/ HEAD > $rpm_topdir/SOURCES/rshim-${version}.tar.gz
~]# rpmbuild -ba --nodeps --define "_topdir $rpm_topdir" --define 'dist %{nil}' *.spec

~]# rpm -ivh $rpm_topdir/RPMS/*/*rpm

~]# systemctl enable rshim
~]# systemctl start rshim
~]# systemctl status rshim


~]# ls  /dev/rshim0
boot  console  misc  rshim


The following command will reboot the bluefield device:

~]# echo "BOOT_MODE 1" > /dev/rshim0/misc
~]# echo "SW_RESET 1" > /dev/rshim0/misc

You can watch the smart nic boot via the serial connection described above.
If you need to reboot the nic just echo the SW_RESET 1 again and it will reset/reboot.



============
PXE:
============
Connect to the serial console of the smart nic:
~]$ telnet $HOST_FQDN 9999

Reboot the smart nic from the HOST system:
~]# echo "SW_RESET 1" > /dev/rshim0/misc

Hit the ESC key to enter the UEFI menu.
Select the PXE nic and/or set the device boot order.

When we are connected to the serial out of the  Bluefield2 device  we can 
enter bios of the smart nic and get the MACs of the NICs and set the boot order.

We will record the MACs and open a ticket to request the   Blufield2 system   be added to dhcp/dns.




When its time for firmware updates...
============
Firmware:
============
To update the Bluefield* device boot partition (ATF & UEFI) and/or to update the 
ConnectX firmware, you will need install the "BlueField Software" and update from 
the minimal Yocto OS on the Bluefield* device RAM.


-----First-----
Download the latest BlueField software version from this website:
 https://developer.nvidia.com/networking/doca

Go to the bottom of the page and select the  "BlueField Software"  tab.
Now look for the  "BlueField BlueOS Software Downloader Center"  table.
Here you will see a CURRENT VERSIONS box and an ARCHIVED VERSIONS box. 
Select the "CURRENT VERSIONS box". There will be different software versions available.
When you select a software 'Version' be sure to look at the 'Product' column 
and confirm your desired device ("BlueField-2 BlueOS" vs "BlueField BlueOS").
We want the SW bundle called "Image: BlueField-<version>.tar.xz" from the 'Download' column
Copy the link address for "Image: BlueField-<version>.tar.xz"


-----Second-----
Install the BlueField software.
~]# yum install -y wget
~]# wget http://www.mellanox.com/downloads/BlueField/BlueField-<VERSION>/BlueField-<VERSION>.tar.xz

~]# tar xJf BlueField-<VERSION>.tar.xz
~]# cd BlueField-<VERSION>/distro/


------Third------
Boot up the minimal Yocto OS on the Bluefield* device RAM.
From the HOST system run the following commands:
~]# cd BlueField-<VERSION>/
~]# cat sample/install.bfb > /dev/rshim0/boot


------Fourth------
Upgrade the boot partition (ATF & UEFI) of the Bluefield* device without re-installation.
Login to the  serial conssole  of the  previously booted minimal Yocto OS on the Bluefield* device
as  "root"  (with no password) and run the following commands:
~]# /opt/mellanox/scripts/bfrec
~]# reboot


------Fifth------
Upgrade ConnectX firmware on the Bluefield* device.
Login to the  serial conssole  of the  previously booted minimal Yocto OS on the Bluefield* device
as  "root"  (with no password) and run the following commands:

For BlueField-2:
~]# /lib/firmware/mellanox/mlxfwmanager_sriov_dis_aarch64_41686

For BlueField-1:
~]# /lib/firmware/mellanox/mlxfwmanager_sriov_dis_aarch64_41682

Note: old versions for BlueField-1 (versions 3.* or less) use to have a single file:
~]# /lib/firmware/mellanox/mlxfwmanager_sriov_dis_aarch64

Now reboot the x86_64 host (not the ARM BlueField) to load the new ConnectX FW.



============
other stuff:
============
Troubleshoot device from HOST.
serial console via minicom:
 yum -y install minicom
 (ctrl-A z turn off flow control for r/w)
 minicom --color on --baudrate 115200 --device /dev/ttyUSB0
